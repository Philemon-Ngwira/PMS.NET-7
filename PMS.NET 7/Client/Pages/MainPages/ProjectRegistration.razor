@page "/ProjectRegistration"
@using PMS.NET_7.Client.Interfaces;
@using PMS.NET_7.Shared.Models;

<MudCard Class="mb-3">
    <MudText Align="Align.Center" Typo="Typo.h2">Project Registration</MudText>
</MudCard>
<MudCard>
    <MudCardHeader>
        <CardHeaderAvatar>
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudText Typo="Typo.body1">Select Project Type</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudGrid>
        @if (projectType.ProjectTypeImage != null)
        {
            <MudItem xs="12" md="8" Class="d-flex justify-center align-center" Style="height:200px;">
                <MudImage ObjectFit="ImageFit" Height="@(SetHeight ? ImageHeight : null)" Width="@(SetWidth ? ImageWidth : null)" Src="@($"{projectType.ProjectTypeImage}")" Alt="Mony the dog" Elevation="25" Class="rounded-lg" />
            </MudItem>
        }

        <MudItem xs="12" md="4">
            <MudPaper Class="pa-4 mt-6 mt-lg-16" Elevation="0">
                <MudText Typo="Typo.h6">Project Types</MudText>
                <MudSelect Label="Image" AnchorOrigin="Origin.BottomCenter" Dense="true" Margin="Margin.Dense" @bind-Value="projectType" Class="mt-4">
                    @foreach (var item in _projecttypes)
                    {
                        <MudSelectItem T="ProjectTypesTable" Value="item">@item.ProjectTypeName</MudSelectItem>
                    }
                </MudSelect>
            </MudPaper>
        </MudItem>
    </MudGrid>

    <MudCardContent>
        <MudForm>
            <MudGrid>
                <MudItem xs="12">
                    @if (projectType.ID == 1)
                    {
                        <MudSelect T="GameTypesTable" Label="Game Type" T="string" @bind-Value="Project.GameType" AnchorOrigin="Origin.BottomCenter" Dense="true" Variant="Variant.Filled" Margin="Margin.Dense" Class="mt-4">
                            @foreach (var item in _gametypes)
                            {
                                <MudSelectItem T="GameTypesTable" Value="item">@item.GameType</MudSelectItem>
                            }
                        </MudSelect>
                    }
                    else if (projectType.ID == 3)
                    {
                        <MudSelect T="ApplicationTypesTable" Label="APP Type" T="string" @bind-Value="Project.ApplicationType" AnchorOrigin="Origin.BottomCenter" Dense="true" Variant="Variant.Filled" Margin="Margin.Dense" Class="mt-4">
                            @foreach (var item in _applicationTypes)
                            {
                                <MudSelectItem T="ApplicationTypesTable" Value="item">@item.ApplicationType</MudSelectItem>
                            }
                        </MudSelect>
                    }

                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Filled" Adornment="Adornment.End" @bind-Value="@Project.ProjectName" AdornmentIcon="@Icons.Material.Outlined.TextFields" T="string" Label="Project Name"></MudTextField>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Variant="Variant.Filled" Adornment="Adornment.End" @bind-Value="@Project.ProjectCode" AdornmentIcon="@Icons.Material.Outlined.TextFields" T="string" Label="Project Code"></MudTextField>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudDatePicker Label="Created Date" @bind-Date="Project.CreatedDate" Variant="Variant.Filled" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudDatePicker Label="Target Completion Date" @bind-Date="Project.TargetCompletionDate" Variant="Variant.Filled" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudNumericField T="int?" HideSpinButtons="true" Label="Estimated Cost" @bind-Value="Project.EstimatedCost" Variant="Variant.Filled" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <InputFile id="fileInput" OnChange="UploadFiles" hidden multiple />

                    <MudFab HtmlTag="label"
                            Color="Color.Primary"
                            Icon="@Icons.Filled.Image"
                            Label="Load picture"
                            for="fileInput" />
                    @if (files != null)
                    {
                        <MudText Typo="@Typo.h6">
                            @files.Count() File@(
                        files.Count() == 1 ? "" : "s"
                        ):
                        </MudText>
                        <MudList>
                            @foreach (var file in files)
                            {
                                <MudListItem Icon="@Icons.Filled.AttachFile" @key="@file">
                                    @file.Name <code>@file.Size bytes</code>
                                </MudListItem>
                            }
                        </MudList>
                    }
                </MudItem>
                <MudItem xs="12">
                    <MudTextField Variant="Variant.Filled" @bind-Value="Project.Description" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Outlined.TextFields" T="string" Lines="3" Label="Optional Description"></MudTextField>
                </MudItem>
            </MudGrid>
        </MudForm>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant="Variant.Filled" FullWidth="true" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" Size="Size.Small" OnClick="SaveProject">Save</MudButton>
    </MudCardActions>
</MudCard>
@code {
    [Inject] IGenericRepositoryService _genericRepositoryService { get; set; }
    DateTime? date = DateTime.Today;
    private int selectedIndex = 2;
    public string Image { get; set; } = "GameProjectTypeIcon.png";

    public bool SetHeight { get; set; } = false;
    public bool SetWidth { get; set; } = true;

    public int ImageHeight { get; set; } = 200;
    public int ImageWidth { get; set; } = 200;

    public ObjectFit ImageFit { get; set; } = ObjectFit.Cover;
    private Transition transition = Transition.Fade;
    IList<IBrowserFile> files = new List<IBrowserFile>();
    protected ProjectsTable Project = new();
    protected IList<ProjectTypesTable> _projecttypes = new List<ProjectTypesTable>();
    protected IList<GameTypesTable> _gametypes = new List<GameTypesTable>();
    protected IList<ApplicationTypesTable> _applicationTypes = new List<ApplicationTypesTable>();
    protected ProjectTypesTable projectType = new();
    protected override async Task OnInitializedAsync()
    {

        await GetProjectTypes();
        await GetGameAndAppTypes();
    }

    protected async Task GetProjectTypes()
    {
        var result = await _genericRepositoryService.GetAllAsync<ProjectTypesTable>("api/PMS/GetProjectTypeTable");
        _projecttypes = result.ToList();
    }

    private async void UploadFiles(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        foreach (var file in e.GetMultipleFiles(10))
        {
            var resizeImage = await file.RequestImageFileAsync(format, 200, 200);
            var buffer = new byte[resizeImage.Size];
            await resizeImage.OpenReadStream().ReadAsync(buffer);
            var Imagedata = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            Project.ProjectImage = Imagedata;
        }

    }

    protected async Task GetGameAndAppTypes()
    {
        var game = await _genericRepositoryService.GetAllAsync<GameTypesTable>("api/PMS/GetGameTypes");
        var app = await _genericRepositoryService.GetAllAsync<ApplicationTypesTable>("api/PMS/GetAppTypes");
        _gametypes = game.ToList();
        _applicationTypes = app.ToList();
    }

    void ProjectTypeSelected()
    {

    }
    protected void SaveProject()
    {
        if(Project.ApplicationType != null)
        {
            Project.ApplicationTypeID = Project.ApplicationType.ID;
        }
        else if(Project.GameType != null)
        {
            Project.GameTypeID = Project.GameType.ID;
        }
        Project.ProjectTypeID = projectType.ID;
    }
}
