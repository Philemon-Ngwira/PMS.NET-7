// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using PMS.NET_7.Shared.Models;
using PMSDomain;

namespace PMSDomain.Data;

public partial class PMSDBContext : DbContext
{
    public PMSDBContext(DbContextOptions<PMSDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<ApplicationTypesTable> ApplicationTypesTables { get; set; }

    public virtual DbSet<AspNetRole> AspNetRoles { get; set; }

    public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims { get; set; }

    public virtual DbSet<AspNetUser> AspNetUsers { get; set; }

    public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }

    public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }

    public virtual DbSet<AspNetUserToken> AspNetUserTokens { get; set; }

    public virtual DbSet<DeviceCode> DeviceCodes { get; set; }

    public virtual DbSet<GameTypesTable> GameTypesTables { get; set; }

    public virtual DbSet<Key> Keys { get; set; }

    public virtual DbSet<PersistedGrant> PersistedGrants { get; set; }

    public virtual DbSet<ProjectProgress> ProjectProgresses { get; set; }

    public virtual DbSet<ProjectTypesTable> ProjectTypesTables { get; set; }

    public virtual DbSet<ProjectsTable> ProjectsTables { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<ApplicationTypesTable>(entity =>
        {
            entity.Property(e => e.ID).ValueGeneratedNever();
        });

        modelBuilder.Entity<AspNetRole>(entity =>
        {
            entity.HasIndex(e => e.NormalizedName, "RoleNameIndex")
                .IsUnique()
                .HasFilter("([NormalizedName] IS NOT NULL)");
        });

        modelBuilder.Entity<AspNetUser>(entity =>
        {
            entity.HasIndex(e => e.NormalizedUserName, "UserNameIndex")
                .IsUnique()
                .HasFilter("([NormalizedUserName] IS NOT NULL)");

            entity.HasMany(d => d.Roles).WithMany(p => p.Users)
                .UsingEntity<Dictionary<string, object>>(
                    "AspNetUserRole",
                    r => r.HasOne<AspNetRole>().WithMany().HasForeignKey("RoleId"),
                    l => l.HasOne<AspNetUser>().WithMany().HasForeignKey("UserId"),
                    j =>
                    {
                        j.HasKey("UserId", "RoleId");
                        j.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");
                    });
        });

        modelBuilder.Entity<GameTypesTable>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK_GameTypessTable");
        });

        modelBuilder.Entity<ProjectTypesTable>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK_ProjectTypes");
        });

        modelBuilder.Entity<ProjectsTable>(entity =>
        {
            entity.HasOne(d => d.ApplicationType).WithMany(p => p.ProjectsTables).HasConstraintName("FK_ProjectsTable_ApplicationTypesTable");

            entity.HasOne(d => d.GameType).WithMany(p => p.ProjectsTables).HasConstraintName("FK_ProjectsTable_GameTypesTable");

            entity.HasOne(d => d.ProjectProgress).WithMany(p => p.ProjectsTables).HasConstraintName("FK_ProjectsTable_ProjectProgress");

            entity.HasOne(d => d.ProjectType).WithMany(p => p.ProjectsTables).HasConstraintName("FK_ProjectsTable_ProjectTypesTable1");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}